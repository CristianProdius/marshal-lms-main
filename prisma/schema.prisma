generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id
  name           String
  email          String
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]
  courses        Course[]         // Courses created by this user (for admins)
  enrollment     Enrollment[]
  lessonProgress LessonProgress[]

  stripeCustomerId String? @unique

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  // B2B Organization Fields
  organizationId       String?
  organization         Organization?         @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  organizationRole     OrganizationRole?     @default(MEMBER)
  joinedOrganizationAt DateTime?
  
  // Organization ownership (for organization creators/owners)
  ownedOrganizations   Organization[]        @relation("OrganizationOwner")
  
  // Invitations sent by this user
  sentInvitations      OrganizationInvitation[] @relation("InvitationSender")
  
  // Organization activities
  organizationActivities OrganizationActivity[]

  @@unique([email])
  @@index([organizationId])
  @@map("user")
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  website     String?
  
  // Contact Information
  contactEmail String?
  contactPhone String?
  address      String?
  city         String?
  country      String?
  postalCode   String?
  
  // Organization Settings
  maxSeats           Int              @default(5)
  allowSelfSignup    Boolean          @default(false)
  domains            String[]         @default([]) // Allowed email domains for auto-join
  requireAdminApproval Boolean        @default(true)
  
  // Billing
  stripeCustomerId   String?          @unique
  billingEmail       String?
  taxId              String?
  
  // Status
  status             OrganizationStatus @default(ACTIVE)
  trialEndsAt        DateTime?
  
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  
  // Relations
  ownerId            String
  owner              User             @relation("OrganizationOwner", fields: [ownerId], references: [id])
  members            User[]
  subscriptions      OrganizationSubscription[]
  enrollments        Enrollment[]
  invitations        OrganizationInvitation[]
  activities         OrganizationActivity[]
  courseLicenses     CourseLicense[]
  
  @@index([slug])
  @@index([ownerId])
  @@map("organization")
}

model OrganizationSubscription {
  id                 String   @id @default(uuid())
  organizationId     String
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Subscription Details
  name               String
  seats              Int      // Number of seats purchased
  usedSeats          Int      @default(0)
  
  // Billing
  stripeSubscriptionId String? @unique
  stripePriceId      String?
  amount             Int      // Amount in cents
  currency           String   @default("usd")
  interval           BillingInterval @default(MONTHLY)
  
  // Status
  status             SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean @default(false)
  canceledAt         DateTime?
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@index([organizationId])
  @@index([stripeSubscriptionId])
  @@map("organization_subscription")
}

model CourseLicense {
  id                 String   @id @default(uuid())
  organizationId     String
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  courseId           String
  course             Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  // License Details
  seats              Int      // Number of seats for this course
  usedSeats          Int      @default(0)
  
  // Purchase Information
  purchasePrice      Int      // Price paid per seat
  totalAmount        Int      // Total amount paid
  stripePaymentIntentId String?
  
  // License Period (null means perpetual)
  validFrom          DateTime @default(now())
  validUntil         DateTime?
  
  status             LicenseStatus @default(ACTIVE)
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@unique([organizationId, courseId])
  @@index([organizationId])
  @@index([courseId])
  @@map("course_license")
}

model OrganizationInvitation {
  id                 String   @id @default(uuid())
  organizationId     String
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Invitation Details
  email              String
  role               OrganizationRole @default(MEMBER)
  message            String?
  
  // Sender
  senderId           String
  sender             User     @relation("InvitationSender", fields: [senderId], references: [id])
  
  // Token for invitation link
  token              String   @unique @default(uuid())
  
  // Course Access (optional - specific courses the invited user will have access to)
  courseIds          String[] @default([])
  
  // Status
  status             InvitationStatus @default(PENDING)
  expiresAt          DateTime
  acceptedAt         DateTime?
  rejectedAt         DateTime?
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  @@unique([organizationId, email])
  @@index([token])
  @@index([email])
  @@index([organizationId])
  @@map("organization_invitation")
}

model OrganizationActivity {
  id                 String   @id @default(uuid())
  organizationId     String
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId             String?
  user               User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Activity Details
  action             String   // e.g., "member_added", "course_purchased", "member_removed"
  entityType         String?  // e.g., "user", "course", "subscription"
  entityId           String?
  metadata           Json?    // Additional data about the activity
  
  createdAt          DateTime @default(now())
  
  @@index([organizationId])
  @@index([userId])
  @@map("organization_activity")
}

// Updated Session model - no changes needed
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

// Updated Account model - no changes needed
model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

// Verification model - no changes needed
model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Updated Course model
model Course {
  id String @id @default(uuid())

  title       String
  description String
  fileKey     String
  price       Int
  duration    Int
  level       CourseLevel @default(Beginner)

  stripePriceId String @unique

  category         String
  smallDescription String
  slug             String @unique

  status CourseStatus @default(Draft)
  
  // B2B Fields
  allowOrganizationPurchase Boolean @default(true)
  bulkDiscountPercentage    Int?    // Discount for bulk purchases
  minimumBulkQuantity       Int?    @default(5)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  chapter        Chapter[]
  enrollment     Enrollment[]
  courseLicenses CourseLicense[]
  
  @@index([slug])
  @@map("course")
}

// Chapter model - no changes needed
model Chapter {
  id String @id @default(uuid())

  title    String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String

  lessons Lesson[]
  
  @@index([courseId])
  @@map("chapter")
}

// Lesson model - no changes needed
model Lesson {
  id String @id @default(uuid())

  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?
  position     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  lessonProgress LessonProgress[]
  
  @@index([chapterId])
  @@map("lesson")
}

// Updated Enrollment model
model Enrollment {
  id String @id @default(uuid())

  amount Int
  status EnrollmentStatus @default(Pending)
  
  // B2B Support
  enrollmentType EnrollmentType @default(INDIVIDUAL)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([userId, courseId])
  @@index([organizationId])
  @@index([courseId])
  @@index([userId])
  @@map("enrollment")
}

// LessonProgress model - no changes needed
model LessonProgress {
  id String @id @default(uuid())

  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  Lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@map("lesson_progress")
}

// ENUMS
enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

enum EnrollmentStatus {
  Pending
  Active
  Cancelled
}

// New B2B Enums
enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum OrganizationStatus {
  TRIAL
  ACTIVE
  SUSPENDED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELLED
  INCOMPLETE
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum EnrollmentType {
  INDIVIDUAL
  ORGANIZATION
}

enum LicenseStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}